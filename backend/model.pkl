import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models
from torch.utils.data import DataLoader
from torch import device
import os

# Load the data (using the data loaders from previous code)
from spliimages import train_loader, val_loader, test_loader  # assuming this is from your previous script

# Define the device (GPU or CPU)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load a pre-trained model (for example, ResNet18)
model = models.resnet18(pretrained=True)

# Modify the final layer to match the number of classes in your dataset (assuming 2 classes here, change if needed)
model.fc = nn.Linear(model.fc.in_features, 2)

# Move the model to the chosen device (GPU or CPU)
model.to(device)

# Define the loss function (CrossEntropyLoss for classification)
criterion = nn.CrossEntropyLoss()

# Define the optimizer (Adam in this case)
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Number of epochs
epochs = 10

# Training loop
for epoch in range(epochs):
    model.train()  # Set the model to training mode
    running_loss = 0.0
    correct = 0
    total = 0
    
    for images, labels in train_loader:
        # Move data to device
        images, labels = images.to(device), labels.to(device)
        
        # Zero the gradients
        optimizer.zero_grad()

        # Forward pass
        outputs = model(images)
        
        # Calculate loss
        loss = criterion(outputs, labels)
        
        # Backward pass and optimization
        loss.backward()
        optimizer.step()
        
        # Update running loss and accuracy
        running_loss += loss.item()
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
    
    # Print training statistics for the epoch
    train_accuracy = 100 * correct / total
    print(f"Epoch {epoch + 1}/{epochs}, Loss: {running_loss/len(train_loader)}, Accuracy: {train_accuracy}%")
    
    # Validation loop
    model.eval()  # Set the model to evaluation mode
    val_loss = 0.0
    val_correct = 0
    val_total = 0

    with torch.no_grad():  # No need to compute gradients for validation
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item()

            _, predicted = torch.max(outputs, 1)
            val_total += labels.size(0)
            val_correct += (predicted == labels).sum().item()
    
    # Print validation statistics
    val_accuracy = 100 * val_correct / val_total
    print(f"Validation Loss: {val_loss/len(val_loader)}, Accuracy: {val_accuracy}%")

# Save the trained model to a file
model_save_path = "backend/model.pkl"
torch.save(model.state_dict(), model_save_path)  # Save the model's state_dict (weights)

# Test the model after training
model.eval()  # Set the model to evaluation mode for testing
test_correct = 0
test_total = 0

with torch.no_grad():  # No need to compute gradients during testing
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        
        _, predicted = torch.max(outputs, 1)
        test_total += labels.size(0)
        test_correct += (predicted == labels).sum().item()

test_accuracy = 100 * test_correct / test_total
print(f"Test Accuracy: {test_accuracy}%")
